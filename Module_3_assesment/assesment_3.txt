1. Which signals are triggered, when the following actions are performed. 
    1) user press ctrl+C  [Answer : SIGINT (signal number = 2)]
    2) kill() system call is invoked  [Answer : SIGTERM (signal number = 15)]
    3) CPU tried to execute an illegal instruction  [Answer : SIGILL (signal number = 4)]
    4) When the program access the unassigned memory  [Answer : SIGSEGV (signal number = 11)]

======================================================================================================================

2. List the gdb command for the following operations  
    1) To run the current executable file  [Answer : run]
    2) To create breakpoints at  [Answer : break <line_number>]
    3) To resume execution once after breakpoint  [Answer : continue]
    4) To clear break point created for a function  [Answer : clear <function_name>]
    5) Print the parameters of the function in the backtrace  [Answer : info args]

======================================================================================================================

3. Guess the output for the following program.

#include<stdio.h>
#include<unistd.h>
int main() {
    if (fork() && (!fork())) {
        if (fork() || fork()) {
            fork();
        }
    }
    printf("2 ");
    return 0;
}

Answer : 2 will be printed seven times

======================================================================================================================

4. Guess the output for the following program.

#include<stdio.h>
#include<unistd.h>
int main() {
    if (fork()) {
        if (!fork()) {
            fork();
            printf("1 ");
        }
        else {
            printf("2 ");
        }
    }
    else {
        printf("3 ");
    }
    printf("4 ");
    return 0;
}

Answer : The output for this program will not be fixed. 
         We will get different outputs each time when we execute the program.
         4 will be printed four times
         3 will be printed one time
         1 will be printed two times
         2 will be printed one time

======================================================================================================================

6. How to avoid Race conditions and deadlocks? 

ANSWER: 
[To avoid RACE CONDITIONS]
    we can use synchronization mechanisms like locks and semaphores to coordinate access
    to shared resources and ensure that only one process can access the resource at a time.

[To avoid DEADLOCK]
    There are four necessary conditions for deadlock to occur. They are-
        * Mutual exclusion
        * No preemption
        * Hold and wait
        * Circular wait
    In order avoid deadlock we can design the system in such a way that atleast one of the
    necessary conditions for deadlock does not occur.

======================================================================================================================

7. What is the difference between exec and fork ?

FORK:
* The fork system call is used to create a the child process, as a copy of the parent process.
* After a successful fork, both the parent and the child processes continue execution from the point of the fork call. 
* child process and parent process have separate memory spaces and can run independently. 
* The fork system call returns different values in the parent and child processes, which helps to distinguish between them.

EXEC:
* The exec system call is used to replace the current process with a new process.  
* The newly created process replaces the memory space of the previous process.

======================================================================================================================

8. What is the difference between process and threads?

Process:
* A process is a program in execution. It has its own memory space, which includes data and resources.
* Processes are isolated from each other and they cannot directly access each other's memory space.
* Inter-process communication mechanisms such as pipes and shared memory are used for communication between processes.
* Processes are heavyweight in terms of resource consumption.

Thread:
* A thread is a lightweight unit of execution within a process. Multiple threads can exist within a single process and they can share same memory space.
* Threads within the same process can communicate directly with each other through shared memory.
* Threads share same resources of a process which can lead to synchronization problems.
* Threads are more efficient in terms of resource consumption as they share resources.
